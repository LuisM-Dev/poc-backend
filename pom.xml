<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.ibm.q2c.referenceasset</groupId>
    <artifactId>or-persist-api</artifactId>
    <name>OR-PERSIST-API</name>
    <description>API for DB persistance</description>
    <version>1.0.0</version>
    <packaging>war</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <failOnMissingWebXml>false</failOnMissingWebXml>

        <liberty.server.name>${project.artifactId}-server</liberty.server.name>

        <version.maven-resources>3.1.0</version.maven-resources>
        <version.junit-jupiter>5.3.2</version.junit-jupiter>
        <version.junit-platform>1.3.2</version.junit-platform>
        <version.surefire-and-failsafe>2.22.1</version.surefire-and-failsafe>
        <version.jmockit>1.43</version.jmockit>
        <version.jacoco>0.8.3</version.jacoco>
        <version.lombok>1.18.10</version.lombok>
        <version.mapstruct>1.3.1.Final</version.mapstruct>
        <version.unirest>1.4.9</version.unirest>
        <version.gson>2.8.6</version.gson>

        <jacoco.report.ut>${project.build.directory}/jacoco.exec</jacoco.report.ut>
        <jacoco.report.it>${project.build.directory}/jacoco-it.exec</jacoco.report.it>

        <sonar.junit.reportPaths>
            ${project.build.directory}/surefire-reports,${project.build.directory}/failsafe-reports
        </sonar.junit.reportPaths>
        <sonar.jacoco.reportPaths>
            ${jacoco.report.ut},${jacoco.report.it},${project.build.directory}/jacoco-container-report/jacoco-it.exec
        </sonar.jacoco.reportPaths>
        <sonar.phase>verify</sonar.phase>

        <sonar.sources>src/main/java</sonar.sources>
        <sonar.tests>src/test/java</sonar.tests>
    </properties>

    <dependencies>

        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>6.1.5.Final</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>jakarta.el</artifactId>
            <version>3.0.3</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.mapstruct/mapstruct-jdk8 -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-jdk8</artifactId>
            <version>${version.mapstruct}</version>
        </dependency>

        <!--  improve code writing  -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${version.lombok}</version>
            <scope>provided</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.mockito/mockito-all -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.10.19</version>
            <scope>test</scope>
        </dependency>

        <!--=============================== SERVER PROVIDED ===============================-->

        <!-- JEE8 Web Profile - http://download.oracle.com/otn-pub/jcp/java_ee_web_profile-8-final-eval-spec/WebProfile.pdf -->
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-web-api</artifactId>
            <version>8.0</version>
            <scope>provided</scope>
        </dependency>

        <!-- MicroProfile 2.0+ - https://github.com/eclipse/microprofile/releases/download/2.0.1/microprofile-spec-2.0.1.pdf -->
        <dependency>
            <groupId>org.eclipse.microprofile</groupId>
            <artifactId>microprofile</artifactId>
            <version>2.1</version>
            <type>pom</type>
            <scope>provided</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.mashape.unirest/unirest-java -->
        <dependency>
            <groupId>com.mashape.unirest</groupId>
            <artifactId>unirest-java</artifactId>
            <version>${version.unirest}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>${version.gson}</version>
        </dependency>

        <!--=================================== TESTING ===================================-->

        <!-- https://mvnrepository.com/artifact/io.rest-assured/rest-assured -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>4.2.0</version>
            <scope>test</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-java -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>5.3.0</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-junit -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit</artifactId>
            <version>5.3.0</version>
            <scope>test</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-expressions -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-expressions</artifactId>
            <version>9.0.0</version>
            <scope>test</scope>
        </dependency>

        <!-- JUnit Jupiter API for writing tests and extensions -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${version.junit-jupiter}</version>
            <scope>test</scope>
        </dependency>

        <!-- JUnit Jupiter test engine implementation, only required at runtime -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${version.junit-jupiter}</version>
            <scope>test</scope>
        </dependency>

        <!-- Support for parameterized tests port JUnit Jupiter -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <version>${version.junit-jupiter}</version>
            <scope>test</scope>
        </dependency>

        <!-- Public API for configuring and launching test plans?ï¿½?typically used by IDEs and build tools -->
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-launcher</artifactId>
            <version>${version.junit-platform}</version>
            <scope>test</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.assertj/assertj-core -->
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.14.0</version>
            <scope>test</scope>
        </dependency>

        <!-- Mocking framework used for creating test doubles -->
        <dependency>
            <groupId>org.jmockit</groupId>
            <artifactId>jmockit</artifactId>
            <version>${version.jmockit}</version>
            <scope>test</scope>
        </dependency>

        <!-- Integration tests -->
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <version>1.10.5</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>jdbc</artifactId>
            <version>1.10.5</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>1.7.25</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.smallrye</groupId>
            <artifactId>smallrye-rest-client</artifactId>
            <version>1.1.0</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.geronimo.config</groupId>
            <artifactId>geronimo-config-impl</artifactId>
            <version>1.2.1</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-jackson-provider</artifactId>
            <version>3.6.2.Final</version>
            <scope>test</scope>
        </dependency>

<!--        <dependency>-->
<!--            <groupId>com.ibm.quest.postgres</groupId>-->
<!--            <artifactId>postgresql</artifactId>-->
<!--            <version>1.0</version>-->
<!--            <scope>test</scope>-->
<!--        </dependency>-->

<!--        <dependency>-->
<!--            <groupId>com.ibm.quest.db2</groupId>-->
<!--            <artifactId>db2jcc</artifactId>-->
<!--            <version>1.0</version>-->
<!--            <scope>test</scope>-->
<!--        </dependency>-->

<!--        <dependency>-->
<!--            <groupId>com.ibm.quest.db2</groupId>-->
<!--            <artifactId>db2jcc4</artifactId>-->
<!--            <version>1.0</version>-->
<!--            <scope>test</scope>-->
<!--        </dependency>-->

<!--        <dependency>-->
<!--            <groupId>com.ibm.quest.db2</groupId>-->
<!--            <artifactId>db2jcc_license_cisuz</artifactId>-->
<!--            <version>1.0</version>-->
<!--            <scope>test</scope>-->
<!--        </dependency>-->

<!--        <dependency>-->
<!--            <groupId>com.ibm.quest.db2</groupId>-->
<!--            <artifactId>db2jcc_license_cu</artifactId>-->
<!--            <version>1.0</version>-->
<!--            <scope>test</scope>-->
<!--        </dependency>-->

        <dependency>
            <groupId>org.eclipse</groupId>
            <artifactId>yasson</artifactId>
            <version>1.0.3</version>
            <scope>test</scope>
        </dependency>

        <!-- JSON-P implementation needed by JSON-B implementation -->
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>javax.json</artifactId>
            <version>1.1.4</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.newrelic.agent.java</groupId>
            <artifactId>newrelic-java</artifactId>
            <version>5.7.0</version>
            <scope>provided</scope>
            <type>zip</type>
        </dependency>

    </dependencies>

    <!-- Plugins execution of <build> node are executed for every build regardless chosen profiles -->
    <build>

        <!-- Suppress default naming that appends version to the name of the WAR file -->
        <finalName>or-persist-api</finalName>

        <!-- Filter (replace place-holders) port configuration files from META-INF directory -->
        <resources>
            <resource>
                <directory>src/main/resources/</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <plugins>

            <!-- Unit Testing -->
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${version.surefire-and-failsafe}</version>
                <configuration>
                    <argLine>${surefireArgLine}
                        -javaagent:${settings.localRepository}/org/jmockit/jmockit/${version.jmockit}/jmockit-${version.jmockit}.jar
                        -Dfile.encoding=UTF-8
                    </argLine>
                    <excludes>
                        <exclude>**/*IT.java</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!-- Installing non-public JAR files into local Maven repository -->
            <plugin>
                <artifactId>maven-install-plugin</artifactId>
                <version>3.0.0-M1</version>
                <inherited>false</inherited>
                <executions>
                    <execution>
                        <id>install-postgres-jdbc-library</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                        <configuration>
                            <groupId>com.ibm.quest.postgres</groupId>
                            <artifactId>postgresql</artifactId>
                            <version>1.0</version>
                            <file>${project.basedir}/src/main/conf/lib/postgresql-42.2.9.jar</file>
                            <packaging>jar</packaging>
                            <generatePom>true</generatePom>
                            <createChecksum>true</createChecksum>
                        </configuration>
                    </execution>
                    <execution>
                        <id>install-db2jcc-library</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                        <configuration>
                            <groupId>com.ibm.quest.db2</groupId>
                            <artifactId>db2jcc</artifactId>
                            <version>1.0</version>
                            <file>${project.basedir}/src/main/conf/lib/db2jcc.jar</file>
                            <packaging>jar</packaging>
                            <generatePom>true</generatePom>
                            <createChecksum>true</createChecksum>
                        </configuration>
                    </execution>
                    <execution>
                        <id>install-db2jcc4-library</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                        <configuration>
                            <groupId>com.ibm.quest.db2</groupId>
                            <artifactId>db2jcc4</artifactId>
                            <version>1.0</version>
                            <file>${project.basedir}/src/main/conf/lib/db2jcc4.jar</file>
                            <packaging>jar</packaging>
                            <generatePom>true</generatePom>
                            <createChecksum>true</createChecksum>
                        </configuration>
                    </execution>
                    <execution>
                        <id>install-db2jcc_license_cisuz-library</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                        <configuration>
                            <groupId>com.ibm.quest.db2</groupId>
                            <artifactId>db2jcc_license_cisuz</artifactId>
                            <version>1.0</version>
                            <file>${project.basedir}/src/main/conf/lib/db2jcc_license_cisuz.jar</file>
                            <packaging>jar</packaging>
                            <generatePom>true</generatePom>
                            <createChecksum>true</createChecksum>
                        </configuration>
                    </execution>
                    <execution>
                        <id>install-db2jcc_license_cu-library</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                        <configuration>
                            <groupId>com.ibm.quest.db2</groupId>
                            <artifactId>db2jcc_license_cu</artifactId>
                            <version>1.0</version>
                            <file>${project.basedir}/src/main/conf/lib/db2jcc_license_cu.jar</file>
                            <packaging>jar</packaging>
                            <generatePom>true</generatePom>
                            <createChecksum>true</createChecksum>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Integration Testing -->
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${version.surefire-and-failsafe}</version>
                <configuration>
                    <argLine>${failsafeArgLine} -Dfile.encoding=UTF-8</argLine>
                    <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Code Coverage -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${version.jacoco}</version>
                <executions>
                    <execution>
                        <id>jacoco-agent-ut</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <destFile>${jacoco.report.ut}</destFile>
                            <propertyName>surefireArgLine</propertyName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>jacoco-agent-it</id>
                        <goals>
                            <goal>prepare-agent-integration</goal>
                        </goals>
                        <configuration>
                            <destFile>${jacoco.report.it}</destFile>
                            <propertyName>failsafeArgLine</propertyName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>jacoco-report-ut</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <dataFile>${jacoco.report.ut}</dataFile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>jacoco-report-it</id>
                        <goals>
                            <goal>report-integration</goal>
                        </goals>
                        <configuration>
                            <dataFile>${jacoco.report.it}</dataFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Download JaCoCo Agent to be injected into running Docker container -->
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.1.1</version>
                <executions>
                    <execution>
                        <id>copy-jacoco-agent-to-target</id>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.jacoco</groupId>
                                    <artifactId>org.jacoco.agent</artifactId>
                                    <version>${version.jacoco}</version>
                                    <classifier>runtime</classifier>
                                    <outputDirectory>${project.build.directory}/jacoco-agent</outputDirectory>
                                    <destFileName>jacoco-agent.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Java source code compilation -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <compilerArgs>
                        <arg>-Xlint:unchecked</arg>
                    </compilerArgs>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${version.mapstruct}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${version.lombok}</version>
                        </path>
                        <!-- other annotation processors -->
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <!-- Unzip New Relic Java agent into target/ -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.1.1</version>
                <executions>
                    <execution>
                        <id>unpack-newrelic</id>
                        <phase>package</phase>
                        <goals>
                            <goal>unpack-dependencies</goal>
                        </goals>
                        <configuration>
                            <includeGroupIds>com.newrelic.agent.java</includeGroupIds>
                            <includeArtifactIds>newrelic-java</includeArtifactIds>
                            <!-- you can optionally exclude files -->
                            <!-- <excludes>**/newrelic.yml</excludes> -->
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>

    </build>

    <profiles>

        <!--  Load build properties from file instead providing it as command line parameters -->
        <profile>
            <id>properties</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                        <version>1.0.0</version>
                        <executions>
                            <execution>
                                <phase>validate</phase>
                                <goals>
                                    <goal>read-project-properties</goal>
                                </goals>
                                <configuration>
                                    <files>
                                        <file>build.properties</file>
                                    </files>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Maven handled Open Liberty - nothing pre-installed would be needed -->
        <profile>
            <id>liberty</id>
            <build>
                <plugins>

                    <!-- Open Liberty -->
                    <plugin>
                        <groupId>net.wasdev.wlp.maven.plugins</groupId>
                        <artifactId>liberty-maven-plugin</artifactId>
                        <version>2.7</version>
                        <configuration>
                            <!-- defines debug port, default port 7777 -->
                            <jvmOptions>
                                <param>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=7777</param>
                            </jvmOptions>
                            <serverName>${liberty.server.name}</serverName>
                            <configFile>src/main/conf/server.xml</configFile>
                            <installAppPackages>project</installAppPackages>
                            <looseApplication>true</looseApplication>
                            <stripVersion>true</stripVersion>
                            <packageFile>${project.build.directory}/${project.artifactId}.zip</packageFile>
                            <include>usr</include>
                            <assemblyArtifact>
                                <groupId>io.openliberty</groupId>
                                <artifactId>openliberty-runtime</artifactId>
                                <version>RELEASE</version>
                                <type>zip</type>
                            </assemblyArtifact>
                            <skipLibertyPackage>true</skipLibertyPackage>
                        </configuration>
                        <executions>
                            <execution>
                                <id>stop-server-before-clean</id>
                                <phase>pre-clean</phase>
                                <goals>
                                    <goal>stop-server</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>create-server</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>install-server</goal>
                                    <goal>create-server</goal>
                                </goals>
                                <configuration>
                                    <serverEnv>${basedir}/build.properties</serverEnv>
                                </configuration>
                            </execution>
                            <execution>
                                <id>install-feature</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>install-feature</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>install-apps</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>install-apps</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>package-server</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>package-server</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Copy DB2 JDBC driver JAR into Open Liberty server -->
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>${version.maven-resources}</version>
                        <executions>
                            <execution>
                                <id>copy-jdbc-jar-to-server</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>src/main/conf/lib</directory>
                                        </resource>
                                    </resources>
                                    <outputDirectory>
                                        ${project.build.directory}/liberty/wlp/usr/servers/${liberty.server.name}/lib
                                    </outputDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy-blueapi-certificates</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>src/main/conf/resources/security</directory>
                                        </resource>
                                    </resources>
                                    <outputDirectory>
                                        ${project.build.directory}/liberty/wlp/usr/servers/${liberty.server.name}/resources/security
                                    </outputDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy-openapi-ui-customization</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>src/main/conf/mpopenapi</directory>
                                        </resource>
                                    </resources>
                                    <outputDirectory>
                                        ${project.build.directory}/liberty/wlp/usr/servers/${liberty.server.name}/mpopenapi
                                    </outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>sonarqube</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.sonarsource.scanner.maven</groupId>
                        <artifactId>sonar-maven-plugin</artifactId>
                        <version>3.6.0.1398</version>
                        <executions>
                            <execution>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sonar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>docker</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>dockerfile-maven-plugin</artifactId>
                        <version>1.4.10</version>
                        <executions>
                            <execution>
                                <id>build-docker-image</id>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <repository>${project.artifactId}</repository>
                            <tag>${project.version}</tag>
                        </configuration>
                        <dependencies>
                            <dependency>
                                <groupId>javax.activation</groupId>
                                <artifactId>javax.activation-api</artifactId>
                                <version>1.2.0</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>cloudfoundry</id>
            <build>
                <plugins>

                    <!-- Assembly the ZIP with application -->
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <version>3.1.0</version>
                        <configuration>
                            <descriptors>
                                <descriptor>src/main/conf/cloudfoundry/assembly.xml</descriptor>
                            </descriptors>
                            <appendAssemblyId>false</appendAssemblyId>
                        </configuration>
                        <executions>
                            <execution>
                                <id>build-cloudfoundry-zip</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Copy filtered manifest into target directory -->
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>${version.maven-resources}</version>
                        <executions>
                            <execution>
                                <id>copy-cloudfoundry-manifest</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${basedir}/src/main/conf/cloudfoundry</directory>
                                            <includes>
                                                <include>manifest.yml</include>
                                            </includes>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                    <encoding>UTF-8</encoding>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>
</project>
